정수를 저장하는 큐를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
명령은 총 여섯 가지이다.
push X: 정수 X를 큐에 넣는 연산이다.
pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 큐에 들어있는 정수의 개수를 출력한다.
empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 
둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 
문제에 나와있지 않은 명령이 주어지는 경우는 없다.
###################################
- 명령의 수(N)를 입력받는다.
- for i=0 to N-1 do:
	- 문자열을 입력받는다.
	- if "pop" 인 경우 then:
		- if empty()가 아니면 then:
			- front() 출력, pop()
	- else if "size"인 경우 then:
		- size() 출력
	- else if "empty"인 경우 then:
		- empty()를 정수형으로 반환하여 출력
	- else if "front"인 경우 then:
		- if empty()가 아니면 then front() 출력
		- else -1 출력
	- else if "back"인 경우 then:
		- if emtpy()가 아니면 then back() 출력
		- else -1 출력
	- else (push X)인 경우
		- 문자열에서 숫자만 추출한다.
		- for i=0 to length of string do:
			- if str[i]가 숫자 then:
				- char형 배열 temp[j++]에 대입
		- 반복문을 빠져나오면 temp[j]에 NULL 문자 대입
		- 숫자를 정수로 변환하는 함수 atoi()를 활용하여 큐에 push
