<Problem>
1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 
예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 
하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.

골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 
이러한 수를 골드바흐 수라고 한다. 
또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 
예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 
10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.

2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 
만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.

<Solution>
- find all prime numbers by using Sieve of Eratosthenes
	- input n
	- init vector<int> v(n+1)
	- for i=2 to n do: v[i] = i
	- for j=2 to sqrt(n) do:
		- if v[j]==0 then: continue
		- for k=j+j to n step j do:
			- v[k] = 0
	- init vector<int> prime
	- for l=2 to n-1 do:
		- if v[l]!=0 then: prime.push_back(l)
- find Gold Bach Partition
	- init vector<pair<int, int>> gold
	- for i=0 to prime.size()-2 do:
		- if prime[i]*2 == n then:
			- gold.push_back(make_pair(prime[i], prime[i])
			- continue
		- for j=i+1 to prime.size()-1 do:
			- init tmp = prime[i] + prime[j]
			- if tmp==n then:
				- gold.push_back(make_pair(prime[i], prime[j])
- find the minimum difference of two prime numbers in gold
	- if gold.size()==1 then:
		- print "gold.front().first, gold.front().second"
	- else then:
		- init min = abs(gold.front().first - gold.front().second)
		- int idx=0
		- for i=1 to gold.size()-1 do:
			- init diff = abs(gold[i].first - gold[i].second)
			- if min>diff then:
				- min = diff
				- idx = j
		- print "gold[idx].first, gold[idx].second"



