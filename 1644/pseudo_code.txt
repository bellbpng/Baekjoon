<Problem>
하나 이상의 연속된 소수의 합으로 나타낼 수 있는 자연수들이 있다. 몇 가지 자연수의 예를 들어 보면 다음과 같다.

3 : 3 (한 가지)
41 : 2+3+5+7+11+13 = 11+13+17 = 41 (세 가지)
53 : 5+7+11+13+17 = 53 (두 가지)
하지만 연속된 소수의 합으로 나타낼 수 없는 자연수들도 있는데, 20이 그 예이다. 
7+13을 계산하면 20이 되기는 하나 7과 13이 연속이 아니기에 적합한 표현이 아니다. 
또한 한 소수는 반드시 한 번만 덧셈에 사용될 수 있기 때문에, 3+5+5+7과 같은 표현도 적합하지 않다.

자연수가 주어졌을 때, 이 자연수를 연속된 소수의 합으로 나타낼 수 있는 경우의 수를 구하는 프로그램을 작성하시오.

#입력
첫째 줄에 자연수 N이 주어진다. (1 ≤ N ≤ 4,000,000)

#출력
첫째 줄에 자연수 N을 연속된 소수의 합으로 나타낼 수 있는 경우의 수를 출력한다.

<Solution>
- input N
- init vector<int> v(N+1, 1)
- for i=2 to sqrt(N) do:
	- if v[i]==0 then:
		- continue
	- for j=i+i to j<=N step: +i do:
		- v[j]=0
- init vector<int> prime
- for i=2 to N do:
	- if v[i]==1 then:
		- prime.push_back(i)
- init cnt=0, sum=0
- init len = prime.size()
- for i=-1 to N-1 do:
	- sum=0
	- for j=i+1 to N do:
		- sum += prime[j]
		- if sum==N then:
			- cnt += 1
			- break
		- else if sum>N then:
			- break
- print "cnt"

